---
import { Download, Printer } from "lucide-react";
import Layout from "@/layouts/main.astro";
---

<Layout>
  <div class="w-full bg-white z-[200] max-w-[794px]">
    <div class="">
      <h1
        class="mb-8 text-center text-3xl font-bold text-gray-800 print:text-2xl"
      >
        FIT REPORT
      </h1>

      <div class="mb-6 flex justify-center gap-4 print:hidden">
        <button
          onclick="window.print()"
          class="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
        >
          <Printer className="h-4 w-4" />
          Print Report
        </button>
        <button
          onclick="downloadPDF()"
          class="flex items-center gap-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
        >
          <Download className="h-4 w-4" />
          Download PDF
        </button>
      </div>

      <div class="fit-report-content">
        <div class="space-y-8 py-4">
          <div class="mb-6">
            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <div class="font-semibold text-gray-700 mb-1">
                  BUYER:
                  <span class="print:inline hidden" id="buyer-value"></span>
                  <input
                    type="text"
                    id="buyer-input"
                    class="border border-gray-300 rounded px-2 py-1 print:hidden"
                    placeholder="Enter buyer"
                  />
                </div>
                <div class="font-semibold text-gray-700 mb-1">
                  STYLE #:
                  <span class="print:inline hidden" id="style-value"></span>
                  <input
                    type="text"
                    id="style-input"
                    class="border border-gray-300 rounded px-2 py-1 print:hidden"
                    placeholder="Enter style #"
                  />
                </div>
                <div class="font-semibold text-gray-700 mb-1">
                  DESCRIPTION:
                  <span class="print:inline hidden" id="description-value"
                  ></span>
                  <input
                    type="text"
                    id="description-input"
                    class="border border-gray-300 rounded px-2 py-1 print:hidden"
                    placeholder="Enter description"
                  />
                </div>
              </div>
              <div>
                <div class="font-semibold text-gray-700 mb-1">
                  FIT:
                  <span class="print:inline hidden" id="fit-value"></span>
                  <input
                    type="text"
                    id="fit-input"
                    class="border border-gray-300 rounded px-2 py-1 print:hidden"
                    placeholder="Enter fit"
                  />
                </div>
                <div class="font-semibold text-gray-700 mb-1">
                  DATE:
                  <span class="print:inline hidden" id="date-value"></span>
                  <input
                    type="date"
                    id="date-input"
                    class="border border-gray-300 rounded px-2 py-1 print:hidden"
                    placeholder="Enter date"
                  />
                </div>
                <div class="font-semibold text-gray-700 mb-1">
                  FABRIC:
                  <span class="print:inline hidden" id="fabric-value"></span>
                  <input
                    type="text"
                    id="fabric-input"
                    class="border border-gray-300 rounded px-2 py-1 print:hidden"
                    placeholder="Enter fabric"
                  />
                </div>
              </div>
            </div>
          </div>

          <div id="reportSectionContainer" class="space-y-12"></div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<!-- <script src="../scripts/fit-analyzer/index.ts"></script> -->
<script>
  import { rotatePoints180 } from "@/scripts/utils";
  import * as THREE from "three";
  import type {
    MasterJson,
    Level,
    Trail,
    ValueEntry,
    Landmark,
    ValueLandmark,
  } from "@/scripts/type";
  import {
    Chart,
    Legend,
    LinearScale,
    LineElement,
    PointElement,
    ScatterController,
    Title,
    Tooltip,
  } from "chart.js";

  Chart.register(
    ScatterController,
    PointElement,
    LineElement,
    LinearScale,
    Title,
    Tooltip,
    Legend
  );

  interface ChartDataPoint {
    x: number;
    y: number;
  }

  interface ChartDataset {
    label: string;
    data: ChartDataPoint[];
    borderColor: string;
    backgroundColor: string;
    showLine: boolean;
    pointRadius: number;
    borderWidth: number;
    pointHitRadius: number;
    fill: boolean;
  }

  interface ProcessedTrailData {
    trailName: string;
    distances: number[];
    avg: number;
    min: number;
    max: number;
    cells: string;
  }

  interface ProcessedLevelData {
    levelName: string;
    landmarks: ValueLandmark[];
    avg: number;
    min: number;
    max: number;
  }

  interface LandmarkDistance {
    landmarkIndex: number;
    distances: number[];
  }

  let loaded = false;
  let totalPass = 0;
  let totalFail = 0;
  let allVariations: { landmark: string; level: string; difference: number }[] =
    []; // { landmark, level, difference }

  // Type-safe null check helpers
  function isNotNull<T>(value: T | null | undefined): value is T {
    return value !== null && value !== undefined;
  }

  function safeArray<T>(arr: (T | null)[] | null | undefined): T[] {
    if (!Array.isArray(arr)) return [];
    return arr.filter(isNotNull);
  }

  function safeString(
    value: string | null | undefined,
    defaultValue = ""
  ): string {
    return typeof value === "string" ? value : defaultValue;
  }

  function safeNumber(
    value: number | null | undefined,
    defaultValue = 0
  ): number {
    return typeof value === "number" && !isNaN(value) ? value : defaultValue;
  }

  function isValidVector3(point: any): point is THREE.Vector3 {
    return (
      point &&
      typeof point.x === "number" &&
      typeof point.y === "number" &&
      typeof point.z === "number"
    );
  }

  function processTrailData(
    trail: Trail,
    level: string,
    landmarkDistances: number[][]
  ): ProcessedTrailData | null {
    if (!trail.levels) return null;

    const levelTrail = trail.levels.find(
      (tl): tl is Level => isNotNull(tl) && tl.name === level
    );

    if (!levelTrail?.landmarks) return null;

    const validLandmarks = safeArray(levelTrail.landmarks);
    if (validLandmarks.length === 0) return null;

    const distances = validLandmarks
      .map((landmark) => safeNumber(landmark.distance, 0) * 100)
      .filter((dist) => dist >= 0);

    if (distances.length === 0) return null;

    const avg =
      distances.reduce((acc, dist) => acc + dist, 0) / distances.length;
    const min = Math.min(...distances);
    const max = Math.max(...distances);

    const cells = validLandmarks
      .map((landmark, i) => {
        const dist = safeNumber(landmark.distance, 0) * 100;
        if (i < landmarkDistances.length) {
          landmarkDistances[i].push(dist);
        }
        return `<td class="border border-gray-300 p-2 text-center">${dist.toFixed(1)}</td>`;
      })
      .join("");

    return {
      trailName: safeString(trail.trailName, "Unknown Trail"),
      distances,
      avg,
      min,
      max,
      cells,
    };
  }

  function processLevelData(
    test: MasterJson,
    level: string
  ): ProcessedLevelData {
    const levelData = safeArray(test.value).find(
      (entry): entry is ValueEntry =>
        isNotNull(entry) && entry.levelName === level
    );

    const landmarks = levelData ? safeArray(levelData.landmarks) : [];

    let avg = 0,
      min = 0,
      max = 0;
    if (landmarks.length > 0) {
      const values = landmarks
        .map((landmark) => safeNumber(landmark.value))
        .filter((value) => value > 0);

      if (values.length > 0) {
        avg = values.reduce((a, b) => a + b, 0) / values.length;
        min = Math.min(...values);
        max = Math.max(...values);
      }
    }

    return {
      levelName: level,
      landmarks,
      avg,
      min,
      max,
    };
  }

  function generateRequiredMeasureCells(
    landmarks: string[],
    levelLandmarks: ValueLandmark[]
  ): string {
    return landmarks
      .map((landmarkName) => {
        const landmark = levelLandmarks.find((l) => l.name === landmarkName);
        const value = safeNumber(landmark?.value);

        if (value <= 0) {
          return `<td class="border border-gray-300 p-2 text-center">-</td>`;
        }
        return `<td class="border border-gray-300 p-2 text-center">${value.toFixed(1)}</td>`;
      })
      .join("");
  }

  function generateAverageRow(landmarkDistances: number[][]): string {
    return landmarkDistances
      .map((distances) => {
        if (distances.length === 0) {
          return `<td class="border border-gray-300 p-2 text-center">-</td>`;
        }
        const avg = distances.reduce((a, b) => a + b, 0) / distances.length;
        return `<td class="border border-gray-300 p-2 text-center">${avg.toFixed(1)}</td>`;
      })
      .join("");
  }

  function generateToleranceRangeRow(
    landmarks: string[],
    levelLandmarks: ValueLandmark[],
    tolerance: number
  ): string {
    return landmarks
      .map((landmarkName) => {
        const landmark = levelLandmarks.find((l) => l.name === landmarkName);
        const value = safeNumber(landmark?.value);

        if (value <= 0 || tolerance <= 0) {
          return `<td class="border border-gray-300 p-2 text-center">-</td>`;
        }

        const absoluteTolerance = value * (tolerance / 100);
        const lower = value - absoluteTolerance;
        const upper = value + absoluteTolerance;
        return `<td class="border border-gray-300 p-2 text-center">${lower.toFixed(1)} - ${upper.toFixed(1)}</td>`;
      })
      .join("");
  }

  function generateResultRow(
    landmarks: string[],
    levelLandmarks: ValueLandmark[],
    landmarkDistances: number[][],
    tolerance: number,
    level: string
  ): string {
    return landmarkDistances
      .map((distances, i) => {
        if (distances.length === 0 || i >= landmarks.length) {
          return `<td class="border border-gray-300 p-2 text-center">-</td>`;
        }

        const landmarkName = landmarks[i];
        const landmark = levelLandmarks.find((l) => l.name === landmarkName);
        const value = safeNumber(landmark?.value);

        if (value <= 0 || tolerance <= 0) {
          return `<td class="border border-gray-300 p-2 text-center">-</td>`;
        }

        const avg = distances.reduce((a, b) => a + b, 0) / distances.length;
        const absoluteTolerance = value * (tolerance / 100);
        const lower = value - absoluteTolerance;
        const upper = value + absoluteTolerance;
        const result = lower <= avg && avg <= upper ? "Pass" : "Fail";
        const bgColor = result === "Pass" ? "bg-green-100" : "bg-red-100";
        const textColor = result === "Pass" ? "text-green-800" : "text-red-800";

        if (result === "Pass") totalPass++;
        else totalFail++;
        allVariations.push({
          landmark: landmarkName,
          level: level,
          difference: Math.abs(avg - value),
        });

        return `<td class="border border-gray-300 ${bgColor} ${textColor} p-2 text-center font-semibold">${result}</td>`;
      })
      .join("");
  }

  function generateDifferenceRow(
    landmarks: string[],
    levelLandmarks: ValueLandmark[],
    landmarkDistances: number[][]
  ): string {
    return landmarkDistances
      .map((distances, i) => {
        if (distances.length === 0 || i >= landmarks.length) {
          return `<td class="border border-gray-300 p-2 text-center">-</td>`;
        }

        const landmarkName = landmarks[i];
        const landmark = levelLandmarks.find((l) => l.name === landmarkName);
        const value = safeNumber(landmark?.value);

        if (value <= 0) {
          return `<td class="border border-gray-300 p-2 text-center">-</td>`;
        }

        const avg = distances.reduce((a, b) => a + b, 0) / distances.length;
        const difference = avg - value;
        const sign = difference >= 0 ? "+" : "";
        const color =
          Math.abs(difference) <= value * 0.05
            ? "text-green-600"
            : "text-red-600";

        return `<td class="border border-gray-300 p-2 text-center font-medium">${difference.toFixed(1)}</td>`;
      })
      .join("");
  }

  function createChartDatasets(
    test: MasterJson,
    level: string
  ): ChartDataset[] {
    const datasets: ChartDataset[] = [];

    // Add body dataset
    const bodyLevel = safeArray(test.body?.levels).find(
      (lvl): lvl is Level => isNotNull(lvl) && lvl.name === level
    );
    console.log(level);
    console.log(test);
    if (bodyLevel?.intersectionPoints) {
      const bodyPoints = safeArray(bodyLevel.intersectionPoints)
        .filter(isValidVector3)
        .map((p): ChartDataPoint => ({ x: p.x, y: p.z }));

      if (bodyPoints.length > 0) {
        datasets.push({
          label: "Body",
          data: bodyPoints,
          borderColor: "rgb(239, 68, 68)",
          backgroundColor: "rgba(239, 68, 68, 0.1)",
          showLine: true,
          pointRadius: 0,
          borderWidth: 2,
          pointHitRadius: 0,
          fill: false,
        });
      }
    }

    // Add trail datasets
    const trails = safeArray(test.trails);
    const colors = [
      "rgb(34, 197, 94)",
      "rgb(168, 85, 247)",
      "rgb(245, 158, 11)",
    ];

    trails.forEach((trail, index) => {
      if (!trail.levels) return;

      const trailLevel = trail.levels.find(
        (lvl): lvl is Level => isNotNull(lvl) && lvl.name === level
      );

      if (trailLevel?.intersectionPoints) {
        const trailPoints = safeArray(trailLevel.intersectionPoints)
          .filter(isValidVector3)
          .map((p): ChartDataPoint => ({ x: p.x, y: p.z }));

        if (trailPoints.length > 0) {
          const color = colors[index % colors.length];

          datasets.push({
            label: safeString(trail.trailName, `Trail ${index + 1}`),
            data: trailPoints,
            borderColor: color,
            backgroundColor: color
              .replace("rgb", "rgba")
              .replace(")", ", 0.1)"),
            showLine: true,
            pointRadius: 0,
            borderWidth: 2,
            pointHitRadius: 0,
            fill: false,
          });
        }
      }
    });

    return datasets;
  }

  function createScatterChart(test: MasterJson, level: string): void {
    console.log(test);
    const scatterChartContainer = document.getElementById(
      `scatterChart-${level}`
    );
    if (!scatterChartContainer) {
      console.warn(`Chart container not found for level: ${level}`);
      return;
    }

    const canvas = document.createElement("canvas");
    canvas.id = `chart-${level}`;
    scatterChartContainer.appendChild(canvas);

    const datasets = createChartDatasets(test, level);

    if (datasets.length === 0) {
      console.warn(`No chart data available for level: ${level}`);
      return;
    }

    try {
      const rotatedPointDatasets = datasets.map(rotatePoints180);
      const ctx = canvas.getContext("2d");

      if (!ctx) {
        console.error("Failed to get canvas context");
        return;
      }

      new Chart(ctx, {
        type: "scatter",
        data: { datasets: rotatedPointDatasets },
        options: {
          plugins: {
            legend: {
              position: "bottom",
              display: true,
              labels: {
                boxHeight: 4,
                boxWidth: 4,
                font: { size: 12 },
              },
            },
          },
          maintainAspectRatio: false,
          scales: {
            x: {
              type: "linear",
              min: -2,
              max: 2,
              ticks: { stepSize: 0.5, display: false },
            },
            y: {
              min: -2,
              max: 2,
              ticks: { display: false, stepSize: 0.5 },
            },
          },
        },
      });
    } catch (error) {
      console.error(`Error creating chart for level ${level}:`, error);
    }
  }

  document.addEventListener("DOMContentLoaded", (): void => {
    const data = localStorage.getItem("jsonData");
    if (!data) return;
    const parsed = JSON.parse(data);
    console.log({ "test one": parsed });
    if (!isNotNull(parsed)) {
      console.warn("No test data available");
      return;
    }

    const test: MasterJson = parsed;

    const reportSectionContainer = document.getElementById(
      "reportSectionContainer"
    );
    if (!reportSectionContainer) {
      console.error("Report section container not found");
      return;
    }

    const bodyLevels = safeArray(test.bodyLevels).filter(
      (level) => typeof level === "string"
    );
    const landmarks = safeArray(test.landmarks).filter(
      (landmark) => typeof landmark === "string"
    );
    const trails = safeArray(test.trails);

    if (bodyLevels.length === 0) {
      console.warn("No body levels found");
      return;
    }

    const tolerance = safeNumber(test.tolerance, 0);
    console.log(tolerance);

    bodyLevels.forEach((level, levelIndex) => {
      const section = document.createElement("div");
      section.className = "print:break-inside-avoid";

      if (levelIndex > 0) {
        section.className += " print:break-before-page";
      }

      const landmarkDistances: number[][] = Array.from(
        { length: landmarks.length },
        () => []
      );

      // Process trails with type safety
      const processedTrails = trails
        .map((trail) => processTrailData(trail, level, landmarkDistances))
        .filter(isNotNull);

      const trailRows = processedTrails
        .map(
          (trailData) => `
          <tr class="hover:bg-gray-50">
            <td class="border border-gray-300 p-2 bg-gray-50">${trailData.trailName}</td>
            ${trailData.cells}
            <td class="border border-gray-300 p-2 text-center">${trailData.min.toFixed(1)}</td>
            <td class="border border-gray-300 p-2 text-center">${trailData.max.toFixed(1)}</td>
            <td class="border border-gray-300 p-2 text-center">${trailData.avg.toFixed(1)}</td>
          </tr>
        `
        )
        .join("");

      // Process level data with type safety
      const levelData = processLevelData(test, level);

      const requiredMeasureCells = generateRequiredMeasureCells(
        landmarks,
        levelData.landmarks
      );
      const avgRow = generateAverageRow(landmarkDistances);
      const toleranceRangeRow = generateToleranceRangeRow(
        landmarks,
        levelData.landmarks,
        tolerance
      );
      const resultRow = generateResultRow(
        landmarks,
        levelData.landmarks,
        landmarkDistances,
        tolerance,
        level
      );
      const differenceRow = generateDifferenceRow(
        landmarks,
        levelData.landmarks,
        landmarkDistances
      );

      section.innerHTML = `
        <div class="space-y-6">
          <h2 class="text-center text-2xl font-bold text-gray-800 border-b-2 border-gray-300 pb-2 print:text-xl">
            ${level.toUpperCase()} Level - Body-Garment Relationship
          </h2>

          <div class="grid grid-cols-[1fr_400px] gap-6">
            <div class="p-4">
              <h3 class="font-semibold text-gray-700 mb-3">Report Details</h3>
              <div class="space-y-2 text-sm">
                <div><span class="font-medium">Level:</span> ${level.toUpperCase()}</div>
                <div><span class="font-medium">Analysis Type:</span> Body-Garment Relationship</div>
                <div><span class="font-medium">Landmarks:</span> ${landmarks.length}</div>
                <div><span class="font-medium">Trails:</span> ${trails.length}</div>
                <div><span class="font-medium">Tolerance:</span> ±${tolerance.toFixed(1)}%</div>
              </div>
            </div>
            
            <div class="chart-container pr-4">
              <h3 class="font-semibold text-gray-700 mb-3 text-center">Cross-Section Analysis</h3>
              <div class="rounded-lg p-2">
                <div id="scatterChart-${level}" class="w-[350px] h-[350px] aspect-square"></div>
              </div>
            </div>
          </div>

          <div class="overflow-x-auto">
            <table class="w-full border-collapse bg-white shadow-sm text-xs rounded-lg overflow-hidden">
              <thead>
                <tr class="bg-gray-100">
                  <th class="border border-gray-300 p-3 text-left font-semibold">Measurement Type</th>
                  ${landmarks
                    .map(
                      (landmark) =>
                        `<th class="border border-gray-300 p-3 text-center font-semibold">${landmark}</th>`
                    )
                    .join("")}
                  <th class="border border-gray-300 p-3 text-center font-semibold">Min</th>
                  <th class="border border-gray-300 p-3 text-center font-semibold">Max</th>
                  <th class="border border-gray-300 p-3 text-center font-semibold">Average</th>
                </tr>
              </thead>
              <tbody>
                <tr class="bg-blue-50">
                  <td class="border border-gray-300 p-2">Required Measure (mm)</td>
                  ${requiredMeasureCells}
                  <td class="border border-gray-300 p-2 text-center">${levelData.min.toFixed(1)}</td>
                  <td class="border border-gray-300 p-2 text-center">${levelData.max.toFixed(1)}</td>
                  <td class="border border-gray-300 p-2 text-center">${levelData.avg.toFixed(1)}</td>
                </tr>
                ${trailRows}
                <tr class="bg-gray-50">
                  <td class="border border-gray-300 p-2">Average</td>
                  ${avgRow}
                  <td class="border border-gray-300 p-2 text-center">-</td>
                  <td class="border border-gray-300 p-2 text-center">-</td>
                  <td class="border border-gray-300 p-2 text-center">-</td>
                </tr>
                <tr class="bg-gray-50">
                  <td class="border border-gray-300 p-2">Tolerance Range</td>
                  ${toleranceRangeRow}
                  <td class="border border-gray-300 p-2 text-center">-</td>
                  <td class="border border-gray-300 p-2 text-center">-</td>
                  <td class="border border-gray-300 p-2 text-center">-</td>
                </tr>
                <tr class="bg-gray-50">
                  <td class="border border-gray-300 p-2">Difference (Avg - Required)</td>
                  ${differenceRow}
                  <td class="border border-gray-300 p-2 text-center">-</td>
                  <td class="border border-gray-300 p-2 text-center">-</td>
                  <td class="border border-gray-300 p-2 text-center">-</td>
                </tr>
                <tr class="font-bold">
                  <td class="border border-gray-300 p-2 bg-gray-100">Result</td>
                  ${resultRow}
                  <td class="border border-gray-300 p-2 text-center">-</td>
                  <td class="border border-gray-300 p-2 text-center">-</td>
                  <td class="border border-gray-300 p-2 text-center">-</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      `;

      reportSectionContainer.appendChild(section);
      createScatterChart(test, level);
    });

    // Calculate percentages
    const totalChecks = totalPass + totalFail;
    const passPercent = totalChecks ? (totalPass / totalChecks) * 100 : 0;
    const failPercent = totalChecks ? (totalFail / totalChecks) * 100 : 0;

    // Top 5 variations
    allVariations.sort((a, b) => b.difference - a.difference);
    const top5 = allVariations.slice(0, 5);

    // Create summary JSON
    const summaryJson = {
      passCount: totalPass,
      failCount: totalFail,
      passPercent: passPercent.toFixed(1),
      failPercent: failPercent.toFixed(1),
      top5Variation: top5,
      // ...add more details as needed
    };

    // Create summary section with improved structure
    const summarySection = document.createElement("div");
    summarySection.className = "print:break-inside-avoid";

    const isApproved = parseFloat(summaryJson.passPercent) >= 60;
    const approvalStatus = isApproved ? "approved" : "rejected";
    const statusColor = isApproved ? "text-green-600" : "text-red-600";

    summarySection.innerHTML = `
      <div class="space-y-6">
        <h2 class="text-2xl font-bold text-gray-800 border-b-2 border-gray-300 pb-2 print:text-xl">
          Summary Report
        </h2>

        <div class="grid grid-cols-1  gap-6">
          <!-- Pass/Fail Statistics -->
          <div class="space-y-4">
            <h3 class="text-lg font-semibold text-gray-700">Fit Analysis Results</h3>
            <table class="w-full border-collapse bg-white shadow-sm text-sm rounded-lg overflow-hidden">
              <thead>
                <tr class="bg-gray-100">
                  <th class="border border-gray-300 p-3 text-left font-semibold">Metric</th>
                  <th class="border border-gray-300 p-3 text-center font-semibold">Count</th>
                  <th class="border border-gray-300 p-3 text-center font-semibold">Percentage</th>
                </tr>
              </thead>
              <tbody>
                <tr class="hover:bg-gray-50">
                  <td class="border border-gray-300 p-3 font-medium">Pass</td>
                  <td class="border border-gray-300 p-3 text-center">${summaryJson.passCount}</td>
                  <td class="border border-gray-300 p-3 text-center text-green-600 font-semibold">${summaryJson.passPercent}%</td>
                </tr>
                <tr class="hover:bg-gray-50">
                  <td class="border border-gray-300 p-3 font-medium">Fail</td>
                  <td class="border border-gray-300 p-3 text-center">${summaryJson.failCount}</td>
                  <td class="border border-gray-300 p-3 text-center text-red-600 font-semibold">${summaryJson.failPercent}%</td>
                </tr>
                <tr class="bg-gray-50 font-bold">
                  <td class="border border-gray-300 p-3">Total</td>
                  <td class="border border-gray-300 p-3 text-center">${totalChecks}</td>
                  <td class="border border-gray-300 p-3 text-center">100%</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>

        <!-- Top 5 Variations Table -->
        <div class="space-y-4">
          <h3 class="text-lg font-semibold text-gray-700">Top 5 Variations by Difference</h3>
          <div class="overflow-x-auto">
            <table class="w-full border-collapse bg-white shadow-sm text-sm rounded-lg overflow-hidden">
              <thead>
                <tr class="bg-gray-100">
                  <th class="border border-gray-300 p-3 text-center font-semibold">Rank</th>
                  <th class="border border-gray-300 p-3 text-left font-semibold">Landmark</th>
                  <th class="border border-gray-300 p-3 text-left font-semibold">Level</th>
                  <th class="border border-gray-300 p-3 text-center font-semibold">Difference (mm)</th>
                  
                </tr>
              </thead>
              <tbody>
                ${summaryJson.top5Variation
                  .map((item, idx) => {
                    const isSignificant = item.difference > 5; // Threshold for significant variation
                    const statusColor = isSignificant
                      ? "text-red-600"
                      : "text-yellow-600";
                    const statusText = isSignificant ? "High" : "Moderate";

                    return `
                      <tr class="hover:bg-gray-50">
                        <td class="border border-gray-300 p-3 text-center font-medium">${idx + 1}</td>
                        <td class="border border-gray-300 p-3 font-medium">${item.landmark}</td>
                        <td class="border border-gray-300 p-3 font-medium">${item.level}</td>
                        <td class="border border-gray-300 p-3 text-center font-semibold">${item.difference.toFixed(1)}</td>
                      
                      </tr>
                    `;
                  })
                  .join("")}
              </tbody>
            </table>
          </div>
        </div>       
      </div>
    `;
    reportSectionContainer.appendChild(summarySection);

    // Log the summary JSON to the console
    console.log("Fit Report Summary JSON:", summaryJson);

    loaded = true;
    console.log("Report generated successfully");

    // Handle input fields for report meta
    const metaFields = [
      { key: "buyer", input: "buyer-input", value: "buyer-value" },
      { key: "style", input: "style-input", value: "style-value" },
      {
        key: "description",
        input: "description-input",
        value: "description-value",
      },
      { key: "fit", input: "fit-input", value: "fit-value" },
      { key: "date", input: "date-input", value: "date-value" },
      { key: "fabric", input: "fabric-input", value: "fabric-value" },
    ];
    metaFields.forEach(({ key, input, value }) => {
      const inputEl = document.getElementById(input) as HTMLInputElement | null;
      const valueEl = document.getElementById(value);
      // Load from localStorage if available
      const saved = localStorage.getItem(`report-meta-${key}`);
      if (inputEl && saved) {
        inputEl.value = saved;
        if (valueEl) valueEl.textContent = saved;
      }
      // Update value span on input
      if (inputEl && valueEl) {
        inputEl.addEventListener("input", () => {
          valueEl.textContent = inputEl.value;
          localStorage.setItem(`report-meta-${key}`, inputEl.value);
        });
        // Set initial value span
        valueEl.textContent = inputEl.value;
      }
    });
  });

  (window as any).downloadPDF = (): void => {
    console.log("PDF download functionality not implemented");
    // TODO: Implement PDF generation logic
  };
</script>
